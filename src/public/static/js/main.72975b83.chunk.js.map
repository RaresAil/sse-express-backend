{"version":3,"sources":["Login.tsx","Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Login","state","loading","idField","login","e","a","preventDefault","setState","fetch","json","response","success","window","location","reload","alert","message","style","display","flexDirection","fontSize","paddingBottom","onSubmit","this","value","placeholder","onChange","target","disabled","type","Component","Table","props","licenseKey","data","map","country","code","currency","level","units","total","quantity","toFixed","colHeaders","rowHeaders","beforeChange","changes","method","row","col","oldValue","newValue","itemId","id","headers","body","JSON","stringify","parseInt","cells","cellProperties","readOnly","App","nests","userId","requestLogin","updateNests","nestData","Array","isArray","currentNest","findIndex","nsts","EventSource","onmessage","event","parse","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72975b83.chunk.js","sourcesContent":["import { Component } from 'react';\n\nexport default class Login extends Component<\n  {},\n  {\n    loading: boolean;\n    idField: string;\n  }\n> {\n  state = {\n    loading: false,\n    idField: ''\n  };\n\n  private login = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (this.state.loading) {\n      return;\n    }\n\n    this.setState({\n      loading: true\n    });\n\n    const response = await (\n      await fetch(`/api/v1/sse/login/${this.state.idField}`)\n    ).json();\n    if (response?.success) {\n      window.location.reload();\n    } else {\n      alert(response?.message);\n      this.setState({\n        loading: false\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          display: 'felx',\n          flexDirection: 'row'\n        }}\n      >\n        <div\n          style={{\n            fontSize: '14px',\n            paddingBottom: '10px'\n          }}\n        >\n          To register, login with an empty id\n        </div>\n        <form\n          style={{\n            display: 'inline-block'\n          }}\n          onSubmit={this.login}\n        >\n          <input\n            value={this.state.idField}\n            placeholder=\"Id\"\n            onChange={({ target: { value } }) => {\n              this.setState({ idField: value });\n            }}\n            disabled={this.state.loading}\n          />\n          <button disabled={this.state.loading} type=\"submit\">\n            Login\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import 'handsontable/dist/handsontable.full.css';\nimport { HotTable } from '@handsontable/react';\n\nimport { Nest } from './App';\n\nexport default function Table(props: { data: Nest[] }) {\n  return (\n    <HotTable\n      licenseKey={'non-commercial-and-evaluation'}\n      data={props.data.map(\n        ({ country, code, currency, level, units, total, quantity }) => [\n          country,\n          code,\n          currency,\n          level.toFixed(3),\n          units,\n          total,\n          quantity\n        ]\n      )}\n      colHeaders={[\n        'Country',\n        'Code',\n        'Currency',\n        'Level',\n        'Units',\n        'Total',\n        'Quantity'\n      ]}\n      rowHeaders={true}\n      beforeChange={(changes, method) => {\n        const [row, col, oldValue, newValue] = changes[0];\n        if (method !== 'edit' || oldValue === newValue || col !== 6) {\n          return;\n        }\n\n        const itemId = props.data[row]?.id;\n\n        if (!itemId) {\n          return;\n        }\n\n        fetch(`/api/v1/sse/quantity/${itemId}`, {\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            quantity: parseInt(newValue)\n          }),\n          method: 'PUT'\n        });\n      }}\n      cells={(row, col) => {\n        let cellProperties = {};\n        if (col !== 6) {\n          cellProperties = {\n            ...cellProperties,\n            readOnly: true\n          };\n        }\n        return cellProperties;\n      }}\n    />\n  );\n}\n","import { Component } from 'react';\nimport Login from './Login';\n\nimport Table from './Table';\n\nexport default class App extends Component<\n  {},\n  {\n    nests: Nest[];\n    loading: boolean;\n    message: string;\n    userId: string;\n    requestLogin: boolean;\n  }\n> {\n  state = {\n    nests: [],\n    loading: true,\n    message: 'Loading...',\n    userId: '',\n    requestLogin: false\n  };\n\n  private updateNests = (nestData: Nest) => {\n    if (Array.isArray(nestData)) {\n      this.setState({\n        nests: nestData\n      });\n    } else {\n      const currentNest = this.state.nests.findIndex(\n        ({ id }) => id === nestData.id\n      );\n\n      if (currentNest >= 0) {\n        const nsts: Nest[] = [...this.state.nests];\n        nsts[currentNest] = nestData;\n        this.setState({\n          nests: nsts\n        });\n      } else {\n        this.setState({\n          nests: [...this.state.nests, nestData]\n        });\n      }\n    }\n  };\n\n  async componentDidMount() {\n    const { userId } = await (\n      await fetch('/api/v1/sse/me', {\n        method: 'GET'\n      })\n    ).json();\n\n    if (!userId) {\n      return this.setState({\n        requestLogin: true,\n        message: ''\n      });\n    }\n\n    const events = new EventSource('/api/v1/sse/events');\n    events.onmessage = (event) => {\n      this.updateNests(JSON.parse(event.data));\n    };\n\n    this.setState({\n      loading: false,\n      userId\n    });\n  }\n\n  render() {\n    if (this.state.requestLogin) {\n      return <Login />;\n    }\n\n    if (this.state.loading) {\n      return <div>{this.state.message}</div>;\n    }\n\n    return (\n      <div className=\"app\">\n        <div>User: {this.state.userId}</div>\n        <Table data={this.state.nests} />\n      </div>\n    );\n  }\n}\n\nexport interface Nest {\n  id: number;\n  country: string;\n  code: string;\n  currency: string;\n  level: number;\n  units: string;\n  total: number;\n  quantity: number;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}