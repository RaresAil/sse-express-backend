{"version":3,"sources":["Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Table","props","licenseKey","data","map","country","code","currency","level","units","total","quantity","toFixed","colHeaders","rowHeaders","beforeChange","changes","method","row","col","oldValue","newValue","itemId","id","fetch","headers","body","JSON","stringify","parseInt","cells","cellProperties","readOnly","App","state","nests","loading","message","userId","updateNests","nestData","Array","isArray","setState","currentNest","findIndex","nsts","json","this","EventSource","onmessage","event","parse","className","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAKe,SAASA,EAAMC,GAC5B,OACE,cAAC,IAAD,CACEC,WAAY,gCACZC,KAAMF,EAAME,KAAKC,KACf,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,MAAOC,EAA1C,EAA0CA,MAAOC,EAAjD,EAAiDA,SAAjD,MAAgE,CAC9DN,EACAC,EACAC,EACAC,EAAMI,QAAQ,GACdH,EACAC,EACAC,MAGJE,WAAY,CACV,UACA,OACA,WACA,QACA,QACA,QACA,YAEFC,YAAY,EACZC,aAAc,SAACC,EAASC,GAAY,IAAD,gBACMD,EAAQ,GADd,GAC1BE,EAD0B,KACrBC,EADqB,KAChBC,EADgB,KACNC,EADM,KAEjC,GAAe,SAAXJ,GAAqBG,IAAaC,GAAoB,IAARF,EAAlD,CAIA,IAAMG,EAAM,UAAGrB,EAAME,KAAKe,UAAd,aAAG,EAAiBK,GAE3BD,GAILE,MAAM,wBAAD,OAAyBF,GAAU,CACtCG,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBjB,SAAUkB,SAASR,KAErBJ,OAAQ,UAGZa,MAAO,SAACZ,EAAKC,GACX,IAAIY,EAAiB,GAOrB,OANY,IAARZ,IACFY,EAAc,2BACTA,GADS,IAEZC,UAAU,KAGPD,K,ICtDME,E,4MAInBC,MAAQ,CACNC,MAAO,GACPC,SAAS,EACTC,QAAS,aACTC,OAAQ,I,EAGFC,YAAc,SAACC,GACrB,GAAIC,MAAMC,QAAQF,GAChB,EAAKG,SAAS,CACZR,MAAOK,QAEJ,CACL,IAAMI,EAAc,EAAKV,MAAMC,MAAMU,WACnC,qBAAGtB,KAAgBiB,EAASjB,MAG9B,GAAIqB,GAAe,EAAG,CACpB,IAAME,EAAY,YAAO,EAAKZ,MAAMC,OACpCW,EAAKF,GAAeJ,EACpB,EAAKG,SAAS,CACZR,MAAOW,SAGT,EAAKH,SAAS,CACZR,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAwBK,Q,2MAQ3BhB,MAAM,iBAAkB,CAC5BP,OAAQ,Q,8BAEV8B,O,mBAJMT,E,EAAAA,O,yCAOCU,KAAKL,SAAS,CACnBN,QACE,yF,OAIS,IAAIY,YAAY,sBACxBC,UAAY,SAACC,GAClB,EAAKZ,YAAYZ,KAAKyB,MAAMD,EAAMhD,QAGpC6C,KAAKL,SAAS,CACZP,SAAS,EACTE,W,sIAKF,OAAIU,KAAKd,MAAME,QACN,8BAAMY,KAAKd,MAAMG,UAIxB,sBAAKgB,UAAU,MAAf,UACE,yCAAYL,KAAKd,MAAMI,UACvB,cAACtC,EAAD,CAAOG,KAAM6C,KAAKd,MAAMC,e,GApECmB,aCUlBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a7242e02.chunk.js","sourcesContent":["import 'handsontable/dist/handsontable.full.css';\nimport { HotTable } from '@handsontable/react';\n\nimport { Nest } from './App';\n\nexport default function Table(props: { data: Nest[] }) {\n  return (\n    <HotTable\n      licenseKey={'non-commercial-and-evaluation'}\n      data={props.data.map(\n        ({ country, code, currency, level, units, total, quantity }) => [\n          country,\n          code,\n          currency,\n          level.toFixed(3),\n          units,\n          total,\n          quantity\n        ]\n      )}\n      colHeaders={[\n        'Country',\n        'Code',\n        'Currency',\n        'Level',\n        'Units',\n        'Total',\n        'Quantity'\n      ]}\n      rowHeaders={true}\n      beforeChange={(changes, method) => {\n        const [row, col, oldValue, newValue] = changes[0];\n        if (method !== 'edit' || oldValue === newValue || col !== 6) {\n          return;\n        }\n\n        const itemId = props.data[row]?.id;\n\n        if (!itemId) {\n          return;\n        }\n\n        fetch(`/api/v1/sse/quantity/${itemId}`, {\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            quantity: parseInt(newValue)\n          }),\n          method: 'PUT'\n        });\n      }}\n      cells={(row, col) => {\n        let cellProperties = {};\n        if (col !== 6) {\n          cellProperties = {\n            ...cellProperties,\n            readOnly: true\n          };\n        }\n        return cellProperties;\n      }}\n    />\n  );\n}\n","import { Component } from 'react';\n\nimport Table from './Table';\n\nexport default class App extends Component<\n  {},\n  { nests: Nest[]; loading: boolean; message: string; userId: string }\n> {\n  state = {\n    nests: [],\n    loading: true,\n    message: 'Loading...',\n    userId: ''\n  };\n\n  private updateNests = (nestData: Nest) => {\n    if (Array.isArray(nestData)) {\n      this.setState({\n        nests: nestData\n      });\n    } else {\n      const currentNest = this.state.nests.findIndex(\n        ({ id }) => id === nestData.id\n      );\n\n      if (currentNest >= 0) {\n        const nsts: Nest[] = [...this.state.nests];\n        nsts[currentNest] = nestData;\n        this.setState({\n          nests: nsts\n        });\n      } else {\n        this.setState({\n          nests: [...this.state.nests, nestData]\n        });\n      }\n    }\n  };\n\n  async componentDidMount() {\n    const { userId } = await (\n      await fetch('/api/v1/sse/me', {\n        method: 'GET'\n      })\n    ).json();\n\n    if (!userId) {\n      return this.setState({\n        message:\n          'Use \"/api/v1/sse/login\" to create a new session, the path paremter \"id\" is optional'\n      });\n    }\n\n    const events = new EventSource('/api/v1/sse/events');\n    events.onmessage = (event) => {\n      this.updateNests(JSON.parse(event.data));\n    };\n\n    this.setState({\n      loading: false,\n      userId\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <div>{this.state.message}</div>;\n    }\n\n    return (\n      <div className=\"app\">\n        <div>User: {this.state.userId}</div>\n        <Table data={this.state.nests} />\n      </div>\n    );\n  }\n}\n\nexport interface Nest {\n  id: number;\n  country: string;\n  code: string;\n  currency: string;\n  level: number;\n  units: string;\n  total: number;\n  quantity: number;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}